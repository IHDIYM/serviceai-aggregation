{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "gps/geofence",
        "responseMode": "onReceived",
        "responseData": {
          "responseDataFieldName": "insideGeofence"
        }
      },
      "id": "Webhook",
      "name": "Receive GPS Data",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300]
    },
    {
      "parameters": {
        "functionCode": "function getDistanceFromLatLonInMeters(lat1, lon1, lat2, lon2) {\n  const R = 6371000; // Radius of the earth in meters\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = R * c; // Distance in meters\n  return d;\n}\n\nconst userLat = $json[\"latitude\"];\nconst userLng = $json[\"longitude\"];\nconst fenceLat = 37.7750;\nconst fenceLng = -122.4195;\nconst radius = 200; // Geofence radius in meters\n\nconst distance = getDistanceFromLatLonInMeters(userLat, userLng, fenceLat, fenceLng);\n\nreturn [{\n  json: {\n    insideGeofence: distance <= radius,\n    distance: distance\n  }\n}];"
      },
      "id": "CheckGeofence",
      "name": "Check Geofence",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [500, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json[\"insideGeofence\"]}}",
              "value2": true
            }
          ]
        }
      },
      "id": "IF",
      "name": "Inside Geofence?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [700, 300]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "result",
              "value": "User is inside the geofence"
            }
          ]
        }
      },
      "id": "InsideSet",
      "name": "Inside Action",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [900, 200]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "result",
              "value": "User is outside the geofence"
            }
          ]
        }
      },
      "id": "OutsideSet",
      "name": "Outside Action",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [900, 400]
    }
  ],
  "connections": {
    "Receive GPS Data": {
      "main": [
        [
          {
            "node": "Check Geofence",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Geofence": {
      "main": [
        [
          {
            "node": "Inside Geofence?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Inside Geofence?": {
      "main": [
        [
          {
            "node": "Inside Action",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Outside Action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "name": "GPS Geofence Trigger"
}